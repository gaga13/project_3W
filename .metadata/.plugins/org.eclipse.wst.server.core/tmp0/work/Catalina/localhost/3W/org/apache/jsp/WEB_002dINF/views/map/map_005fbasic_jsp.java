/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2019-04-14 08:47:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.map;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_005fbasic_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>편의시설 검색하기</title>\r\n");
      out.write("<style>\r\n");
      out.write(".map_wrap, .map_wrap * {margin:0; padding:0;font-family:'Malgun Gothic',dotum,'돋움',sans-serif;font-size:12px;}\r\n");
      out.write(".map_wrap {position:relative;width:100%;height:350px;}\r\n");
      out.write("#category {position:absolute;top:10px;left:10px;border-radius: 5px; border:1px solid #909090;box-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);background: #fff;overflow: hidden;z-index: 2;}\r\n");
      out.write("#category li {float:left;list-style: none;width:50px;px;border-right:1px solid #acacac;padding:6px 0;text-align: center; cursor: pointer;}\r\n");
      out.write("#category li.on {background: #eee;}\r\n");
      out.write("#category li:hover {background: #ffe6e6;border-left:1px solid #acacac;margin-left: -1px;}\r\n");
      out.write("#category li:last-child{margin-right:0;border-right:0;}\r\n");
      out.write("#category li span {display: block;margin:0 auto 3px;width:27px;height: 28px;}\r\n");
      out.write("#category li .category_bg {background:url(http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png) no-repeat;}\r\n");
      out.write("#category li .bank {background-position: -10px 0;}\r\n");
      out.write("#category li .mart {background-position: -10px -36px;}\r\n");
      out.write("#category li .pharmacy {background-position: -10px -72px;}\r\n");
      out.write("#category li .oil {background-position: -10px -108px;}\r\n");
      out.write("#category li .cafe {background-position: -10px -144px;}\r\n");
      out.write("#category li .store {background-position: -10px -180px;}\r\n");
      out.write("#category li.on .category_bg {background-position-x:-46px;}\r\n");
      out.write(".placeinfo_wrap {position:absolute;bottom:28px;left:-150px;width:300px;}\r\n");
      out.write(".placeinfo {position:relative;width:100%;border-radius:6px;border: 1px solid #ccc;border-bottom:2px solid #ddd;padding-bottom: 10px;background: #fff;}\r\n");
      out.write(".placeinfo:nth-of-type(n) {border:0; box-shadow:0px 1px 2px #888;}\r\n");
      out.write(".placeinfo_wrap .after {content:'';position:relative;margin-left:-12px;left:50%;width:22px;height:12px;background:url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}\r\n");
      out.write(".placeinfo a, .placeinfo a:hover, .placeinfo a:active{color:#fff;text-decoration: none;}\r\n");
      out.write(".placeinfo a, .placeinfo span {display: block;text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}\r\n");
      out.write(".placeinfo span {margin:5px 5px 0 5px;cursor: default;font-size:13px;}\r\n");
      out.write(".placeinfo .title {font-weight: bold; font-size:14px;border-radius: 6px 6px 0 0;margin: -1px -1px 0 -1px;padding:10px; color: #fff;background: #d95050;background: #d95050 url(http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/arrow_white.png) no-repeat right 14px center;}\r\n");
      out.write(".placeinfo .tel {color:#0f7833;}\r\n");
      out.write(".placeinfo .jibun {color:#999;font-size:11px;margin-top:0;}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"map_wrap\">\r\n");
      out.write("    <div id=\"map\" style=\"width:100%;height:85%;position:relative;overflow:hidden;\"></div>\r\n");
      out.write("    <ul id=\"category\" >\r\n");
      out.write("        <li id=\"BK9\" data-order=\"0\"> \r\n");
      out.write("            <span class=\"category_bg bank\"></span>\r\n");
      out.write("            은행\r\n");
      out.write("        </li>       \r\n");
      out.write("        <li id=\"MT1\" data-order=\"1\"> \r\n");
      out.write("            <span class=\"category_bg mart\"></span>\r\n");
      out.write("            마트\r\n");
      out.write("        </li>  \r\n");
      out.write("        <li id=\"PM9\" data-order=\"2\"> \r\n");
      out.write("            <span class=\"category_bg pharmacy\"></span>\r\n");
      out.write("            약국\r\n");
      out.write("        </li>  \r\n");
      out.write("        <li id=\"OL7\" data-order=\"3\"> \r\n");
      out.write("            <span class=\"category_bg oil\"></span>\r\n");
      out.write("            주유소\r\n");
      out.write("        </li>  \r\n");
      out.write("        <li id=\"CE7\" data-order=\"4\"> \r\n");
      out.write("            <span class=\"category_bg cafe\"></span>\r\n");
      out.write("            카페\r\n");
      out.write("        </li>  \r\n");
      out.write("        <li id=\"CS2\" data-order=\"5\"> \r\n");
      out.write("            <span class=\"category_bg store\"></span>\r\n");
      out.write("            편의점\r\n");
      out.write("        </li>      \r\n");
      out.write("    </ul>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 편의시설 검색 스크립트 -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=0ea65279ab9874eb15c5fd98582cf9af&libraries=services,clusterer,drawing\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t\r\n");
      out.write("\t// 맵 생성\r\n");
      out.write("\tvar map;\r\n");
      out.write("\tvar ps;\r\n");
      out.write("\t\r\n");
      out.write("\t//마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다\r\n");
      out.write("\tvar placeOverlay = new daum.maps.CustomOverlay({zIndex:1}), \r\n");
      out.write("\t    contentNode = document.createElement('div'), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다 \r\n");
      out.write("\t    markers = [], // 마커를 담을 배열입니다\r\n");
      out.write("\t    currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\r\n");
      out.write("\t\r\n");
      out.write("    window.onload = function () {\r\n");
      out.write("        // 페이지 로드시 나의 현재 위치의 위도와 경도 얻기\r\n");
      out.write("        // 현재 위치정보 딱 한번 얻기\r\n");
      out.write("        navigator.geolocation.getCurrentPosition(sucCall);\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    // 위치정보 얻기 성공시 자동으로 호출되는 콜백함수. 인자는 Position 객체\r\n");
      out.write("    var sucCall = function (position) {\r\n");
      out.write("        // 위도, 경도 얻기\r\n");
      out.write("        var lat = position.coords.latitude;\r\n");
      out.write("        var lng = position.coords.longitude;\r\n");
      out.write("\r\n");
      out.write("        // 지도표시\r\n");
      out.write("        displayMap(lat, lng);\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    function displayMap(lat, lng) {    \r\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("\t\t    mapOption = {\r\n");
      out.write("\t\t        center: new daum.maps.LatLng(lat, lng), // 지도의 중심좌표\r\n");
      out.write("\t\t        level: 5 // 지도의 확대 레벨\r\n");
      out.write("\t\t    };  \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도를 생성합니다    \r\n");
      out.write("\t\tmap = new daum.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 장소 검색 객체를 생성합니다\r\n");
      out.write("\t\tps = new daum.maps.services.Places(map); \r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar mapTypeControl = new daum.maps.MapTypeControl(); //일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성\r\n");
      out.write("\t\t\r\n");
      out.write("\t    // 지도에 컨트롤을 추가해야 지도위에 표시됩니다\r\n");
      out.write("\t    // daum.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다\r\n");
      out.write("\t    map.addControl(mapTypeControl, daum.maps.ControlPosition.TOPRIGHT);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 지도에 idle 이벤트를 등록합니다\r\n");
      out.write("\t\tdaum.maps.event.addListener(map, 'idle', searchPlaces);\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    function setMarkerClick(marker, content) {\r\n");
      out.write("        // 인포윈도우를 생성합니다\r\n");
      out.write("        var infowindow = new daum.maps.InfoWindow({\r\n");
      out.write("            content: content,\r\n");
      out.write("            removable: true\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커에 클릭이벤트를 등록합니다\r\n");
      out.write("        daum.maps.event.addListener(marker, 'click', function () {\r\n");
      out.write("            // 마커 위에 인포윈도우를 표시합니다\r\n");
      out.write("            infowindow.open(map, marker);\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t// 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다 \r\n");
      out.write("\tcontentNode.className = 'placeinfo_wrap';\r\n");
      out.write("\t\r\n");
      out.write("\t// 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때\r\n");
      out.write("\t// 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 daum.maps.event.preventMap 메소드를 등록합니다 \r\n");
      out.write("\taddEventHandle(contentNode, 'mousedown', daum.maps.event.preventMap);\r\n");
      out.write("\taddEventHandle(contentNode, 'touchstart', daum.maps.event.preventMap);\r\n");
      out.write("\t\r\n");
      out.write("\t// 커스텀 오버레이 컨텐츠를 설정합니다\r\n");
      out.write("\tplaceOverlay.setContent(contentNode);  \r\n");
      out.write("\t\r\n");
      out.write("\t// 각 카테고리에 클릭 이벤트를 등록합니다\r\n");
      out.write("\taddCategoryClickEvent();\r\n");
      out.write("\t\r\n");
      out.write("\t// 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다\r\n");
      out.write("\tfunction addEventHandle(target, type, callback) {\r\n");
      out.write("\t    if (target.addEventListener) {\r\n");
      out.write("\t        target.addEventListener(type, callback);\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t        target.attachEvent('on' + type, callback);\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 카테고리 검색을 요청하는 함수입니다\r\n");
      out.write("\tfunction searchPlaces() {\r\n");
      out.write("\t    if (!currCategory) {\r\n");
      out.write("\t        return;\r\n");
      out.write("\t    }\r\n");
      out.write("\t    \r\n");
      out.write("\t    // 커스텀 오버레이를 숨깁니다 \r\n");
      out.write("\t    placeOverlay.setMap(null);\r\n");
      out.write("\t\r\n");
      out.write("\t    // 지도에 표시되고 있는 마커를 제거합니다\r\n");
      out.write("\t    removeMarker();\r\n");
      out.write("\t    \r\n");
      out.write("\t    ps.categorySearch(currCategory, placesSearchCB, {useMapBounds:true}); \r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n");
      out.write("\tfunction placesSearchCB(data, status, pagination) {\r\n");
      out.write("\t    if (status === daum.maps.services.Status.OK) {\r\n");
      out.write("\t\r\n");
      out.write("\t        // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다\r\n");
      out.write("\t        displayPlaces(data);\r\n");
      out.write("\t    } else if (status === daum.maps.services.Status.ZERO_RESULT) {\r\n");
      out.write("\t        // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n");
      out.write("\t\r\n");
      out.write("\t    } else if (status === daum.maps.services.Status.ERROR) {\r\n");
      out.write("\t        // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요\r\n");
      out.write("\t        \r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 지도에 마커를 표출하는 함수입니다\r\n");
      out.write("\tfunction displayPlaces(places) {\r\n");
      out.write("\t\r\n");
      out.write("\t    // 몇번째 카테고리가 선택되어 있는지 얻어옵니다\r\n");
      out.write("\t    // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다\r\n");
      out.write("\t    var order = document.getElementById(currCategory).getAttribute('data-order');\r\n");
      out.write("\t\r\n");
      out.write("\t    \r\n");
      out.write("\t\r\n");
      out.write("\t    for ( var i=0; i<places.length; i++ ) {\r\n");
      out.write("\t\r\n");
      out.write("\t            // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("\t            var marker = addMarker(new daum.maps.LatLng(places[i].y, places[i].x), order);\r\n");
      out.write("\t\r\n");
      out.write("\t            // 마커와 검색결과 항목을 클릭 했을 때\r\n");
      out.write("\t            // 장소정보를 표출하도록 클릭 이벤트를 등록합니다\r\n");
      out.write("\t            (function(marker, place) {\r\n");
      out.write("\t                daum.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("\t                    displayPlaceInfo(place);\r\n");
      out.write("\t                });\r\n");
      out.write("\t            })(marker, places[i]);\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n");
      out.write("\tfunction addMarker(position, order) {\r\n");
      out.write("\t    var imageSrc = 'http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n");
      out.write("\t        imageSize = new daum.maps.Size(27, 28),  // 마커 이미지의 크기\r\n");
      out.write("\t        imgOptions =  {\r\n");
      out.write("\t            spriteSize : new daum.maps.Size(72, 208), // 스프라이트 이미지의 크기\r\n");
      out.write("\t            spriteOrigin : new daum.maps.Point(46, (order*36)), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n");
      out.write("\t            offset: new daum.maps.Point(11, 28) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n");
      out.write("\t        },\r\n");
      out.write("\t        markerImage = new daum.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n");
      out.write("\t            marker = new daum.maps.Marker({\r\n");
      out.write("\t            position: position, // 마커의 위치\r\n");
      out.write("\t            image: markerImage \r\n");
      out.write("\t        });\r\n");
      out.write("\t\r\n");
      out.write("\t    marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n");
      out.write("\t    markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n");
      out.write("\t\r\n");
      out.write("\t    return marker;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n");
      out.write("\tfunction removeMarker() {\r\n");
      out.write("\t    for ( var i = 0; i < markers.length; i++ ) {\r\n");
      out.write("\t        markers[i].setMap(null);\r\n");
      out.write("\t    }   \r\n");
      out.write("\t    markers = [];\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다\r\n");
      out.write("\tfunction displayPlaceInfo (place) {\r\n");
      out.write("\t    var content = '<div class=\"placeinfo\">' +\r\n");
      out.write("\t                    '   <a class=\"title\" href=\"' + place.place_url + '\" target=\"_blank\" title=\"' + place.place_name + '\">' + place.place_name + '</a>';   \r\n");
      out.write("\t\r\n");
      out.write("\t    if (place.road_address_name) {\r\n");
      out.write("\t        content += '    <span title=\"' + place.road_address_name + '\">' + place.road_address_name + '</span>' +\r\n");
      out.write("\t                    '  <span class=\"jibun\" title=\"' + place.address_name + '\">(지번 : ' + place.address_name + ')</span>';\r\n");
      out.write("\t    }  else {\r\n");
      out.write("\t        content += '    <span title=\"' + place.address_name + '\">' + place.address_name + '</span>';\r\n");
      out.write("\t    }                \r\n");
      out.write("\t   \r\n");
      out.write("\t    content += '    <span class=\"tel\">' + place.phone + '</span>' + \r\n");
      out.write("\t                '</div>' + \r\n");
      out.write("\t                '<div class=\"after\"></div>';\r\n");
      out.write("\t\r\n");
      out.write("\t    contentNode.innerHTML = content;\r\n");
      out.write("\t    placeOverlay.setPosition(new daum.maps.LatLng(place.y, place.x));\r\n");
      out.write("\t    placeOverlay.setMap(map);  \r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t// 각 카테고리에 클릭 이벤트를 등록합니다\r\n");
      out.write("\tfunction addCategoryClickEvent() {\r\n");
      out.write("\t    var category = document.getElementById('category'),\r\n");
      out.write("\t        children = category.children;\r\n");
      out.write("\t\r\n");
      out.write("\t    for (var i=0; i<children.length; i++) {\r\n");
      out.write("\t        children[i].onclick = onClickCategory;\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 카테고리를 클릭했을 때 호출되는 함수입니다\r\n");
      out.write("\tfunction onClickCategory() {\r\n");
      out.write("\t    var id = this.id,\r\n");
      out.write("\t        className = this.className;\r\n");
      out.write("\t\r\n");
      out.write("\t    placeOverlay.setMap(null);\r\n");
      out.write("\t\r\n");
      out.write("\t    if (className === 'on') {\r\n");
      out.write("\t        currCategory = '';\r\n");
      out.write("\t        changeCategoryClass();\r\n");
      out.write("\t        removeMarker();\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t        currCategory = id;\r\n");
      out.write("\t        changeCategoryClass(this);\r\n");
      out.write("\t        searchPlaces();\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다\r\n");
      out.write("\tfunction changeCategoryClass(el) {\r\n");
      out.write("\t    var category = document.getElementById('category'),\r\n");
      out.write("\t        children = category.children,\r\n");
      out.write("\t        i;\r\n");
      out.write("\t\r\n");
      out.write("\t    for ( i=0; i<children.length; i++ ) {\r\n");
      out.write("\t        children[i].className = '';\r\n");
      out.write("\t    }\r\n");
      out.write("\t\r\n");
      out.write("\t    if (el) {\r\n");
      out.write("\t        el.className = 'on';\r\n");
      out.write("\t    } \r\n");
      out.write("\t} \r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
